1.
'''A string slice can take a third index that specifies the "step size;" that is, the number of spaces between successive characters. A step size of 2 means every other character; 3 means every third, etc.
 fruit = 'banana'
 fruit[0:5:2]
'bnn'
A step size of -1 goes through the word backwards, so the slice [::-1] generates a reversed string.
Use this idiom to write a one-line version of is_palindrome'''
def is_palindrome(s):
    if s==s[::-1]:
        return 'it is palindrome'
    else:
        return 'not a palindrome'
a=input("enter the string:")
print(is_palindrome(a))

2.

'''Write a function called rotate_word() that takes a string and an integer as parameters, and
that returns a new string that contains the letters from the original string "rotated" by the given amount.
For example, "cheer" rotated by 7 is "jolly" and "melon" rotated by -10 is "cubed". You might want to use the built-in functions ord,
which converts a character to a numeric code, and chr, which converts numeric codes to characters.'''


def rotate_word(st,num):
     new_string=''

     for i in st:
         v=ord(i)+num
         if v>=122:
           new_string=new_string+chr(v-26)
         elif v<=97:
             new_string = new_string + chr(v+26)
         else:
             new_string = new_string + chr(v)
     return new_string
input_str=input("enter the string:")
rotation=int(input("enter the amount to rotate:"))
print(rotate_word(input_str,rotation))

3.

'''In 1939 Ernest Vincent Wright published a 50,000 word novel called Gadsby that does not contain the letter "e."
Since "e" is the most common letter in English, that’s not easy to do.
In fact, it is difficult to construct a solitary thought without using that most common symbol.
It is slow going at first, but with caution and hours of training you can gradually gain facility. All right, I’ll stop now.
Write a function called has_no_e that returns True if the given word doesn’t have the letter "e" in it.'''

def has_no_e(word):
    if 'e' not in word:
        return True
    else:
        return False
st=input("enter the string:")
if has_no_e(st)==True:
    print("the word has no 'e'")
else:
    print("the word has 'e'")


4.

'''Modify the above program to print only the words that have no “e” and
compute the percentage of the words in the list have no “e.”'''

def has_no_e(word):
    if 'e' not in word:
        return True
    else:
        return False


l=['hi','she','he']
l1=[]
for i in l:
 if has_no_e(i)==True:
    l1.append(i)
print(l1)

ne=0
for i in l:
  if has_no_e(i)==False:
    ne=ne+1
d=(ne/len(l))*100
print(d)



5.

'''Write a function named avoids that takes a word and a string of forbidden letters, and that returns True
if the word doesn’t use any of the forbidden letters.'''

def avoids(word,st):
    for i in word:
        if i in st:
            return False
            break
    return True


w=input("enter the word:")
for_letters=input("enter the forbidden letters:")
if avoids(w,for_letters)==True:
    print('it is a correct word')
else:
    print('it is not a correct word')

6.

'''Modify your program to prompt the user to enter a string of forbidden letters and
then print the number of words that don’t contain any of them.
Can you find a combination of 5 forbidden letters that excludes the smallest number of words?'''

def avoids(word,st):
    c=0
    for i in word:
        if i in st:
            return False
            break
    return True#not present

li=[]
for_letter=input("enter the forbidden letter word:")
for i in range(1,5):
    w=input("enter the words:")
    li.append(w)
print(li)

for i in li:
    if avoids(i,w)==True:
        print(i)


7.

'''Write a function named using_only() that takes a word and a string of letters, and that returns True
if the word contains only letters in the list.
Can you make a sentence using only the letters acefhlo? Other than "Hoe alfalfa?"'''

def using_only(word,st):
    for i in word:
        if i not in st:
            return False
            break
    return True


if using_only('cho','acefhlo')==True:
    print('valid string')
else:
    print('invalid string')


8.

'''Write a function called is_abecedarian that returns True if the letters in a word appear in alphabetical order (double letters are ok).
How many abecedarian words are there? (i.e) "Abhor" or "Aux" or "Aadil" should return "True" Banana should return "False"'''
def is_abecedarian(word):
    for i in range(0,len(word)-1):
       # print(i,word[i],word[i+1])
        #print(i, ord(word[i]), ord(word[i + 1]))
        if ord(word[i])>ord(word[i+1]):
            return False
            break
    return True

w=input('enter the string:')
w1=w.lower()
if is_abecedarian(w1):
    print('valid word')
else:
    print('invalid word')

9.

'''Write a function called is_sorted that takes a list as a parameter and returns True if the list is sorted in ascending order and
False otherwise. You can assume (as a precondition) that the elements of the list can be compared with the relational operators <, >, etc.
For example, is_sorted([1,2,2]) should return True and is_sorted(['b','a']) should return False.'''


def is_sorted(li):
    for i in range(0,len(li)-1):
        #print(ord(str(li[i])),ord(str(li[i+1])))
        if ord(str(li[i]))>ord(str(li[i+1])):
         return False
         break
    return True
list1=[]
for i in range(1,4):
 input_list=input()
 list1.append(input_list)

if is_sorted(list1)==True:
    print("valid list")
else:
    print('not valid list')


10.

''''Two words are anagrams if you can rearrange the letters from one to spell the other.
Write a function called is_anagram that takes two strings and returns True if they are anagrams.'''

def anagram(word1,word2):
   if (sorted(word1))==(sorted(word2)):
       print('it is anagram')
   else:
       print('it is not anagram')

w1=input("enter the string1:")
w2=input("enter the string2:")
anagram(w1,w2)

