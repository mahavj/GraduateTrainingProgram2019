1.Create user defined exceptino for capturing image files which is .jpg, .jpeg, .png etc.,
Example:Please enter file name: png_file_details.pdf


#User_exception.py

class User_defined_exception(Exception):
 pass
class image_input_Error(User_defined_Exception):
pass

#checkimagefileError.py

import User_exception 
def input_a_file(value):
  extension_list=['png','jpg','jpeg','pwd','gif']
  lis=value.split('.')
  extension=lis[len(lis)]
  try:
    if extension in extension_list:
      raise image_input_Error
    else:
      print('it is a valid input file')

    Except image_input_Error:
        print("Not a valid input file")
 

file_name=input("please enter the filename")
input_a_file(file_name)



2.Create simple banking process using class and function
Example class/functions:
new_user,offer,debit_card_issue., etc
#banking_process.py

class bankprocess:
pass
class new_user(bankprocess):
  def __init__(self.name,self.contact_num):
      self.name=name
      self.contact_num=contact
   def display():
     print('Welcome new customer..!!'+name+str(contact))
class existing_user(bankprocess):
    def __init__(self.name,self.contact_num,self.acc_no,self.balance): 
     self.name=name
     self.contact_num=contact
     self.acc_no=acc_no
     self.balance=balance
     print('Welcome customer!! how can we help you'+name+str(contact)+str(acc_no))
      
       
   def services():
     print('1.debit service 2.credit service 3.loan policy')
     k=int(input('enter the service needed'))
     if k==1:
       balance=balance+10000
       print('10% offer on purchases')
     elif k==2:
       balance=balance+12000
       print('20% offer on purchases')
     else:
       print('loan eligibility criterias')
     
person1=new_user('acc','34646')
peron1.display()
person2=existing_user('cig',546547,5475)
person2.services()


       
   
      



3.Create student information file (xlsx format) from database.

the table should contain 10 columns minimum
get the list of student's identiy number input from the text file (.txt)
-----------------------------------------------------------------------------------------

#read a file
with open('inputfile.txt') as f:
  f1=f.read()
  s=f1.split(',')
print(s)

# db connection
import sqlconnector as sc
import csv

db_connection=sc.connect(host='localhost',user='username',password='pass','db_name'='db')
mycursor=db_connection.cursor()
#open outputfile
with open('outfile.xlsx','a') as f2:
for i in s:
  mycursor.execute('select * from student_info where id in '%s,i')
  c=csv.writer(mycursor.fetchall())
  
f2.close()


4.Read the IP Addresses from the file using regular expression.

import re
with open('ips.txt') as f:
  read_file=f.readlines()
 for i in read_file:
     s=re.findall(r'[0-2]?[0-9]?[0-9]{1}\.[0-2]?[0-9]?[0-9]{1}\.[0-2]?[0-9][0-9]{1}',i)
 print(s)



5.Convert number to words range will be 9999

Example:

1000 - one thousand

1750 - one thousand seven hundred fifty

4881 - four thousand eight hundred eighty one

 

-----------------------------------------------------------------------------------------
numbers_dict={'1':'one','2':'two','3':'three','4':'four','5':'five','6':'six','7':'seven',
'8':'eight','9':'nine','10':'ten','11':'eleven','12':'twelve','13':'thirteen'}

input_number=input("enter the number to convert into word:")
st=''

if len(input_number)==1:
 print(numbers_dict.get(input_number))
elif len(input_number)==2:
   if input_number[-2:] in numbers_dict:
     st=st+numbers.get(input_number[-2:])
   else:
      p3=numbers.get(input_number[2])
      st=st+p3+'ty'
      p4=numbers.get(input_number[3])
      st=st+' '+p4
elif len(input_number)==3:
      p1=numbers.get(input_number[0])
      st=st+p1+' hundred '
      if input_number[-2:] in numbers_dict:
        st=st+numbers.get(input_number[-2:])
      else:
        p3=numbers.get(input_number[2])
        st=st+p3+'ty'
        p4=numbers.get(input_number[3])
        st=st+' '+p4
  
else: 
    p1=numbers.get(input_number[0])
    st=st+' thousand '+s
    p2=numbers.get(input_number[1])
    st=st+p2
    if input_number[-2:] in numbers_dict:
      st=st+numbers.get(input_number[-2:])
    else:
       p3=numbers.get(input_number[2])
       st=st+p3+'ty'
       p4=numbers.get(input_number[3])
       st=st+' '+p4
  

print(st)


 

6.Text Wrapping by given column range

Example:
Hi, this is sample text. -- (sample text)9 -- (column range)
output:
123456789
Hi, this -- (right text padding can have spaces)
is sample
text. -- (no space is allowed in left text padding)
------------------------------------------------------------------------------------------
column_range=int(input('range:'))

with open('inputfile.txt','r') as f: 
 f1=f.read(column_range)
 print(f1)
 f2=f.read(column_range)
 print(f2)

 

7.Validate the given expression

input: {(([8+3)])*(1+2)])}

input_exp=input('enter the exp:')
li=[]
count=1
#sym_list=['{','(','[','}',')',']']
for i in input_exp:
	if i =="{":
		count=count+1
	elif i=="[":
		count1=count1+1
	elif i=="(":
		count2=count2+1
	elif i=="}":
		count=count-1
	elif i =="]":
		count1=count1-1
	elif i==")"
		count2=count2-1
	else:
		continue
if count==0 and count1==0 and count2==0:
	 print('valid expression')
else:
	print("invalid expression")
		











 
 